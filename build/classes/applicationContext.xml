<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
            http://www.springframework.org/schema/jdbc
            http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.1.xsd">
    
    <!-- scans the classpath for annotated components (including @Repostory 
    and @Service  that will be auto-registered as Spring beans  -->          
    <context:component-scan base-package="ssh" >
        <!--排除@Controller组件，该组件由SpringMVC配置文件扫描 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>
    
    <!-- methods or classes needing to run in a complete transaction will be annotated with Transactional -->
    <tx:annotation-driven />

    <!--配数据源 -->
    <bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="com.mysql.jdbc.Driver" />
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/demo" />
        <property name="user" value="root" />
        <property name="password" value="root" />
        
	    <property name="acquireIncrement" value="1"></property>  
	    <property name="initialPoolSize" value="300"></property>  
	    <property name="maxIdleTime" value="60"></property>  
	    <property name="maxPoolSize" value="200"></property>  
	    <property name="minPoolSize" value="50"></property>  
	    <property name="acquireRetryDelay" value="1000"></property>  
	    <property name="acquireRetryAttempts" value="60"></property>  
	    <property name="breakAfterAcquireFailure" value="false"></property>
	    <!-- 如出现Too many connections, 注意修改mysql的配置文件my.ini,增大最多连接数配置项,(查看当前连接命令:show processlist) -->
    </bean>

    
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />

        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="connection.pool_size">10</prop>
                <prop key="current_session_context_class">thread</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.provider_configuration_file_resource_path">ehcache.xml</prop>
            </props>
        </property>
	    <property name="mappingLocations"> 
		    <list> 
		      <value>classpath:ssh/model/User.hbm.xml</value> 
	        </list> 
        </property> 
        <!--  
        <property name="annotatedClasses">
            <list>
                <value>ssh.model.User</value>
            </list>
        </property>
        -->
    </bean>
    
    <!-- 配置事务管理器 -->
    <bean id="transactionManager"
        class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    
    <!-- 事务的传播特性 -->
    <tx:advice id="txadvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="save*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
        </tx:attributes>
    </tx:advice>
    

    <aop:config>
        <aop:pointcut id="pcMethod" expression="execution(* ssh.service..*.*(..))" />
        <aop:advisor pointcut-ref="pcMethod" advice-ref="txadvice" />
    </aop:config>
      
      
      

   <!-- 自定义aop处理 测试 -->
   <bean id="aopTest" class="ssh.aop.AopTest"></bean>
   <bean id="myAop" class="ssh.aop.MyAop"></bean>
   <aop:config proxy-target-class="true">
        <aop:aspect ref="myAop">
            <aop:pointcut id="pcMethodTest" expression="execution(* ssh.aop.AopTest.test*(..))"/>
            <aop:before pointcut-ref="pcMethodTest" method="before"/>
            <aop:after pointcut-ref="pcMethodTest" method="after"/>
        </aop:aspect>
    </aop:config>
    


 </beans>